name: release-cli

on:
  push:
    tags:
      - "cli-v*.*.*"

env:
  CGO_ENABLED: 0

jobs:
  release-cli:
    timeout-minutes: 30
    runs-on: ubuntu-latest

    steps:
      - name: Split tag
        id: split
        run: |
          tag=${{ github.ref_name }}
          echo "version=$(echo $tag | cut -d- -f2-)" >> $GITHUB_OUTPUT

      # Checkout repository
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-1.21.11-release-cache-${{ hashFiles('cli/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-1.21.11-release-cache-cli

      - name: Set up Go 1.x
        uses: actions/setup-go@v5
        with:
          go-version-file: cli/go.mod
          cache: false

      # Set up Docker Buildx for multi-platform builds
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Build multi-platform binaries for Linux (amd64 and arm64)
      - name: Build Multi-Platform Binaries
        run: |
          cd cli
          goarch_list=("amd64" "arm64")
          for arch in "${goarch_list[@]}"; do
            GOARCH=$arch go build -ldflags "-s -w -X github.com/stewartshea/cloudquery/cli/cmd.Version=${{ steps.split.outputs.version }}" -o cloudquery-linux-${arch} ./main.go
          done

      # Create GitHub release and upload binaries
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            cli/cloudquery-linux-amd64
            cli/cloudquery-linux-arm64
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
